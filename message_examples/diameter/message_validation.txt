*** Keywords ***
Validate Message Version
    [Arguments]  ${version}
    ${version-act}  Read Hex Data  1
    Should Be Equal  ${version}  ${version-act}

Validate Message Length
    [Arguments]  ${length}
    ${length-act}=  Read From Data  3
    Should Be Equal  ${length}  ${length-act}

Validate Message Flags
    [Arguments]  ${flags}
    ${flags-act}=  Read Hex data  1
    Should Be Equal  ${flags}  ${flags-act}

Validate Command Code
    [Arguments]  ${cc}
    ${cc-act}=  Read From Data  3
    Should Be Equal  ${cc}  ${cc-act}

Validate Application Id
    [Arguments]  ${ai}
    ${ai-act}=  Read From Data  4
    Should Be Equal  ${ai}  ${ai-act}

Validate Hop-By-Hop Identifier
    [Arguments]  ${hbhi}
    ${hbhi-act}=  Read Hex Data  4
    Should Be Equal  ${hbhi}  ${hbhi-act}

Validate End-To-End Identifier
    [Arguments]  ${e2ei}
    ${e2ei-act}=  Read Hex Data  4
    Should Be Equal  ${e2ei}  ${e2ei-act}

Validate AVP: Origin-Host
    [Arguments]  ${host}
    ${length}=  Get Length  ${host}
    Validate AVP Code And Flags  ${avp_code.origin_host}  0x40
    Validate AVP Length  ${length + 8}
    ${host-act}=  Read String From Data  ${length}
    Should Be Equal  ${host}  ${host-act}
    Read Padding After String Data  ${length}

Validate AVP Code And Flags
    [Arguments]  ${avp_code}  ${avp_flags}
    Validate AVP Code  ${avp_code}
    Validate AVP Flags  ${avp_flags}

Validate AVP Code
    [Arguments]  ${avp_code}
    ${avp_code-act}=  Read From Data  4
    Should Be Equal  ${avp_code-act}  ${avp_code}

Validate AVP Flags
    [Arguments]  ${flags}
    ${flags-act}=  Read Hex Data  1
    Should Be Equal  ${flags}  ${flags-act}

Validate AVP Length
    [Arguments]  ${length}
    ${length-act}  Read From Data  3
    Should Be Equal As Strings  ${length}  ${length-act}

Validate AVP: Origin-Realm
    [Arguments]  ${realm}
    ${length}=  Get Length  ${realm}
    Validate AVP Code And Flags  ${avp_code.origin_realm}  0x40
    Validate AVP Length  ${length + 8}
    ${realm-act}=  Read String From DAta  ${length}
    Should Be Equal  ${realm}  ${realm-act}
    Read Padding After String Data  ${length}

Validate AVP: Host-IP-Address
    [Arguments]  ${ip}
    Validate AVP Code And Flags  ${avp_code.host_ip_address}  0x40
    Validate AVP Length  14
    Validate Host Ip Address  1  ${ip}
    Read From Data  2

Validate Host Ip Address
    [Arguments]  ${family}  ${ip}
    ${family-act}=  Read From Data  2
    Should Be Equal  ${family}  ${family-act}
    ${ip-act}=  Read Ip From Hex
    Should Be Equal  ${ip}  ${ip-act}

Validate AVP: Vendor-Id
    [Arguments]  ${id}
    Validate AVP Code And Flags  ${avp_code.vendor_id}  0x40
    Validate AVP Length  12
    Validate Vendor-id  ${id}

Validate Vendor-Id
    [Arguments]  ${id}
    ${id-act}=  Read From Data  4
    Should Be Equal  ${id}  ${id-act}

Validate AVP: Product-Name
    [Arguments]  ${product_name}
    Validate AVP Code And FLags  ${avp_code.product_name}  0x00
    ${length}=  Get Length  ${product_name}
    Validate AVP Length  ${length + 8}
    ${pn-act}=  Read String From DAta  ${length}
    Should Be Equal  ${product_name}  ${pn-act}
    Read Padding After String Data  ${length}

Validate AVP: Supported-Vendor-Id
    [Arguments]  ${id}
    Validate AVP Code And Flags  ${avp_code.supported_vendor_id}  0x40
    Validate AVP Length  12
    Validate Supported-vendor-id  ${id}

Validate Supported-Vendor-Id
    [Arguments]  ${id}
    ${id-act}=  Read From Data  4
    Should Be Equal  ${id}  ${id-act}

Validate AVP: Vendor-Specific-Application-Id
    [Arguments]  ${avp_vendor_id}  ${auth_application_id}
    Validate AVP code and Flags  ${avp_code.vendor_specific_application_id}  0x40
    Validate AVP Length  32
    Validate AVP: Vendor-id  ${avp_vendor_id}
    Validate AVP: Auth-application-id  ${auth_application_id}

Validate AVP: Auth-Application-Id
    [Arguments]  ${id}
    Validate AVP Code And Flags  ${avp_code.auth_application_id}  0x40
    Validate AVP Length  12
    Validate Auth-Application-id  ${id}

Validate Auth-Application-Id
    [Arguments]  ${id}
    ${id-act}=  Read From Data  4
    Should Be Equal  ${id}  ${id-act}

Validate AVP: Inband-Security-Id
    [Arguments]  ${id}
    Validate AVP Code And Flags  ${avp_code.inband_security_id}  0x40
    Validate AVP Length  12
    Validate Inband-Security-id  ${id}

Validate Inband-Security-Id
    [Arguments]  ${id}
    ${id-act}=  Read From Data  4
    Should Be Equal  ${id}  ${id-act}

Validate AVP: Firmware-Revision
    [Arguments]  ${fw_rev}
    Validate AVP Code And Flags  ${avp_code.firmware_revision}  0x00
    Validate AVP LEngth  12
    Validate Firmware-revision  ${fw_rev}

Validate Firmware-Revision
    [Arguments]  ${fw_rev}
    ${fw_rev-act}  Read From Data  4
    Should Be Equal  ${fw_rev}  ${fw_rev-act}

Validate AVP: Result-Code
    [Arguments]  ${code}
    Validate AVP Code And Flags  ${avp_code.result_code}  0x40
    Validate AVP Length  12
    Validate Result-Code  ${code}

Validate Result-Code
    [Arguments]  ${code}
    ${code-act}=  Read From Data  4
    Should Be Equal  ${code}  ${code-act}

Read Padding After String Data
    [Arguments]  ${length}  # length of string which is followed by padding
    [Documentation]  Diameter protocol has 32 bit wide fields. As we enter string data it might cause packet malformation if length of the string is not divisible by four octets - that is is 32 bits. in order to prevent this we add or read extra padding after string if necessary.
    ${padding}=  Evaluate  (4-${length%4})%4
    Read From Data  ${padding}

Validate Disconnect-PeerAnswer

Validate AVP: Session-ID
    [Arguments]  ${session_id}
    Validate AVP Code And Flags  ${avp_code.session_id}  0x40
    ${length}=  Get Length  ${session_id}
    Validate AVP Length  ${length + 8}
    ${session_id-act}=  Read String From Data  ${length}
    Should be equal  ${session_id}  ${session_id-act}
    Read Padding After String Data  ${length}

Validate AVP: Auth-Session-State
    [Arguments]  ${session_state}
    Validate AVP Code and Flags  ${avp_code.auth_session_state}  0x40
    Validate AVP Length  12
    ${session_state-act}  Read From Data  4
    Should Be Equal  ${session_state}  ${session_state-act}

Validate AVP: Destination-Host
    [Arguments]  ${destination_host}
    Validate AVP Code And Flags  ${avp_code.destination_host}  0x40
    ${length}=  Get Length  ${destination_host}
    Validate AVP Length  ${length + 8}
    ${destination_host-act}=  Read String From Data  ${length}
    Should Be Equal  ${destination_host}  ${destination_host-act}
    Read Padding after String Data  ${length}

Validate AVP: Destination-realm
    [Arguments]  ${destination_realm}
    Validate AVP Code And Flags  ${avp_code.destination_realm}  0x40
    ${length}=  Get Length  ${destination_realm}
    Validate Avp Length  ${length + 8}
    ${destination_realm-act}=  Read String From Data  ${length}
    Should Be Equal  ${destination_realm}  ${destination_realm-act}
    Read Padding After String Data  ${length}

Validate AVP: User-Name
    [Arguments]  ${user_name}
    Validate AVP Code And Flags  ${avp_code.user_name}  0x40
    ${length}=  Get Length  ${user_name}
    Validate AVP Length  ${length + 8}
    ${user_name-act}=  Read String From Data  ${length}
    Should be equal  ${user_name}  ${user_name-act}
    Read Padding After String Data  ${length}

Validate AVP: Requested-EUTRAN-Authentication-Info
    [Arguments]  ${number_of_requested_vectors}  ${immediate_response}
    Validate AVP Code And Flags  ${avp_code.requested_eutran_authentication_info}  0xc0
    Validate AVP Length  44
    ${avp_vendor_id-act}=  Read From DATa  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    Validate Requested-EUTRAN-Authentication-info  ${number_of_requested_vectors}  ${immediate_response}

Validate Requested-EUTRAN-Authentication-info
    [Arguments]  ${number_of_requested_vectors}  ${immediate_response_preferred}
    Validate AVP: Number-Of-Requested-Vectors  ${number_of_requested_vectors}
    Validate AVP: Immediate-Response-Preferred  ${immediate_response_preferred}

Validate AVP: Number-Of-Requested-Vectors
    [Arguments]  ${number_of_requested_vectors}
    Validate AVP Code And Flags  ${avp_code.number_of_requested_vectors}  0xc0
    Validate AVP Length  16
    ${avp_vendor_id-act}=  Read From DAta  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    ${number_of_requested_vectors-act}=  Read From Data  4
    Should Be Equal  ${number_of_requested_vectors}  ${number_of_requested_vectors-act}

Validate AVP: Immediate-Response-Preferred
    [Arguments]  ${immediate_response_preferred}
    Validate AVP Code And Flags  ${avp_code.immediate_response_preferred}  0xc0
    Validate AVP Length  16
    ${avp_vendor_id.3gpp-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id.3gpp-act}
    ${immediate_response_preferred-act}=  Read From Data  4
    Should Be Equal  ${immediate_response_preferred}  ${immediate_response_preferred-act}

Validate AVP: Visited-PLMN-Id
    [Arguments]  ${visited_plmn_id}
    Validate AVP Code and Flags  ${avp_code.visited_plmn_id}  0xc0
    ${length}=  Get Length  ${visited_plmn_id}
    Validate AVP Length  ${length/2 + 12}
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    Validate visited-plmn-id  ${visited_plmn_id}

Validate visited-plmn-id
    [Arguments]  ${visited_plmn_id}
    ${length}=  Get Length  ${visited_plmn_id}
    ${visited_plmn_id-act}=  Read Hex Data  ${length/2}  NO_PREFIX
    Should Be Equal  ${visited_plmn_id}  ${visited_plmn_id-act}
    Add Padding After String Data  ${length/2}

Validate AVP: Authentication-Info
    Validate AVP Code and Flags  ${avp_code.authentication_info}  0xc0
    Validate AVP Length  168
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    Validate Authentication-Info

Validate Authentication-Info
    Validate AVP: E-UTRAN-Vector

Validate E-UTRAN-Vector
    Validate AVP: Item-Number  1
    Validate AVP: RAND  63c619b4ae986823d79234cf0073e550
    Validate AVP: XRES  72e42af0fbfe1fabc6b0078b55159251
    Validate AVP: AUTN  01021104040060001102304400626500
    Validate AVP: KASME  1234567890123456789012345678901234567890123456789012345678901234

Validate AVP: E-UTRAN-Vector
    Validate AVP Code And Flags  ${avp_code.e_utran_vector}  0xc0
    Validate Avp Length  156
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    Validate E-UTRAN-Vector

Validate AVP: Route-Record
    [Arguments]  ${route_record}
    Validate AVP Code And Flags  ${avp_code.route_record}  0x40
    ${length}=  Get Length  ${route_record}
    Validate AVP Length  ${length + 8}
    ${route_record-act}=  Read String From Data  ${length}
    Should Be Equal  ${route_record}  ${route_record-act}
    read Padding After String Data  ${length}

Validate AVP: Item-Number
    [Arguments]  ${item_number}
    Validate AVP Code and Flags  ${avp_code.item_number}  0xc0
    Validate AVP Length  16
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    ${item_number-act}=  Read From Data  4
    Should Be Equal  ${item_number}  ${item_number-act}

Validate AVP: KASME
    [Arguments]  ${kasme}
    Validate AVP Code and Flags  ${avp_code.kasme}  0xc0
    ${length}=  Get Length  ${kasme}
    Validate AVP Length  ${length/2 + 12}
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    ${kasme-act}=  Read Hex Data  ${length/2}  NO_0x
    Should Be Equal  ${kasme}  ${kasme-act}
    Read Padding After String Data  ${length/2}

Validate AVP: AUTN
    [Arguments]  ${autn}
    Validate AVP Code and Flags  ${avp_code.autn}  0xc0
    ${length}=  Get Length  ${autn}
    Validate AVP Length  ${length/2 + 12}
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    ${autn-act}=  Read Hex Data  ${length/2}  NO_0x
    Should Be Equal  ${autn}  ${autn-act}
    Read Padding After String Data  ${length/2}

Validate AVP: XRES
    [Arguments]  ${xres}
    Validate AVP Code and Flags  ${avp_code.xres}  0xc0
    ${length}=  Get Length  ${xres}
    Validate AVP Length  ${length/2 + 12}
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    ${xres-act}=  Read Hex Data  ${length/2}  NO_0x
    Should Be Equal  ${xres}  ${xres-act}
    Read Padding After String Data  ${length/2}

Validate AVP: RAND
    [Arguments]  ${rand}
    Validate AVP Code and Flags  ${avp_code.rand}  0xc0
    ${length}=  Get Length  ${rand}
    Validate AVP Length  ${length/2 + 12}
    ${avp_vendor_id-act}=  Read From Data  4
    Should Be Equal  ${avp_vendor_id.3gpp}  ${avp_vendor_id-act}
    ${rand-act}=  Read Hex Data  ${length/2}  NO_0x
    Should Be Equal  ${rand}  ${rand-act}
    Read Padding After String Data  ${length/2}

