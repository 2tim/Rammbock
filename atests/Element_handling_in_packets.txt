*** Settings ***
Suite Setup   
Suite Teardown
Test Setup      UDP Server and Client are initialized
Test Teardown   Close Connections
Default Tags    regression
Resource        resources/server_client.txt

*** Variables ***
${COUNTRY CODE}  358

*** Test Cases ***
Encode message with decimal data as octets
    Create Message and Add Decimal as octets
    Client sends Data
    Receive data and checks it exists

Encode message with multiple decimal data elements as octets
    Create Message and add two decimals as octets
    Client Sends Data
    Receive data and checks it exists

Encode message with bitstream data as binary
    Create Message And Add Bitstream data
    Client sends data
    Receive data and checks it exists

Encode Message with multiple data fields containing bits
    Create Message And Add Multiple bitstream fields
    Client Sends Data
    Receive data and checks it exists

Try Encode too long decimal data as octets
    Reset Message
    Run Keyword And Expect Error  Value is too big for length  Add Decimal As Octets  300  1

Try to encode too long decimal as bits
    Reset Message
    Run Keyword And Expect Error  Value is too big for length  Add Decimal As Bits  256  1

Decode octets from message to single decimal
    Create Message and Add Decimal as octets
    Client sends Data
    receive and validate message with single decimal

Decode octets from message to decimals
    Create Message and add two decimals as octets
    Client sends Data
    Receive And Validate message with multiple decimals

Decode bits from message to single decimal
    Create Message And Add Bitstream data
    Client Sends Data
    Receive And Validate Message With single binary decimal

Decode bits from message to Multiple decimals
    Create Message And Add Multiple bitstream fields
    Client Sends Data
    Receive And Validate Message With multiple binary decimals

Encode And Decode message with string
    Create And Send Message with single String field
    Receive and validate Message with single String field

Encode And Decode message with multiple strings
    Create and Send Message With Multiple String Fields
    Receive And Validate message With Multiple String fields

Encode And Decode message with octets, bits and strings
    Create Message And Add Strings and Decimals and Binary as octets
    Client Sends Data
    Receive And Validate Message With Strings and Decimals and Binary As Octets

Encode message with TBCD coded number.
    Create and send Message with TBCD number  358  6100000000001
    Receive data and checks it exists

Decode message with TBCD coded Even Number
    Create and send Message with TBCD number  358  6100000000001
    Receive and validate message with TBCD number  16  358  6100000000001

Decode message with TBCD coded Odd Number
    Create and send Message with TBCD number  358  61000000000001
    Receive and validate message with TBCD number  17  358  61000000000001

Encode and Decode message with ip-address
    Reset Message
    Add Ip  10.10.10.10
    Client Sends Data
    Server Receives Data
    ${ip}=  Read IP from Hex
    Should Be Equal  ${ip}  10.10.10.10

Try To Read Too Many Bits From Bitstream Data
    Reset Message
    Add Decimal As Bits  255  8
    Client Sends Data
    Server Receives Data
    Run keyword and expect error  Not enough bits to read  Read Binary  9

Encode And Decode Message with raw hex data
    Reset Message
    Add hex data  0xe36006e2  4
    Client Sends Data
    Server Receives Data
    ${value}=  read hex data  4
    Should Be Equal  ${value}  0xe36006e2

Try to add Too big hex data
    Reset Message
    Run keyword and expect error  Value is too big for length  Add hex data  0xe36006e2  3

Try to add hex with wrong format
    Reset Message
    Run keyword and expect error  Value is not valid hex  Add hex data  GGGGG  4

Read Binary
    Add Decimal As Bits  255  8
    ${bin}=  Read binary  4
    Should Be Equal As Numbers  ${bin}  15
    ${bin}=  Read binary  4
    Should Be Equal As Numbers  ${bin}  15

add string with different encodings
    test scandinavian string with encoding  ääööåå  utf-8
    test scandinavian string with encoding  ääööåå  utf-8

Add Number with Hex Prefix
    Add Decimal As Octets  0xff  1
    ${data}=  Read From Data  1
    Should Be Equal As Integers  255  ${data}

*** Keywords ***
Create Message and add two decimals as octets
    Reset Message
    Add Decimal as Octets  72  1
    Add Decimal as Octets  216  2

Create Message And Add Bitstream data
    Reset Message
    Add decimal as bits  255  8
    Client Sends Data

Create Message And Add Multiple bitstream fields
    Reset Message
    Add Decimal As Bits  32  6
    Add Decimal As Bits  40  6
    Add Decimal As Bits  15  4

Create Message and Add Decimal as octets
    Reset Message
    Add Decimal as Octets  72  1

Create Message And Add Strings and Decimals and Binary as octets
    Reset Message
    Add Decimal as Octets  255  1
    Add Decimal as Octets  4  2
    Add Decimal As Bits  63  6
    Add Decimal As Bits  3  6
    Add Decimal As Bits  10  4
    Add String  value
    Add String  ${SPACE}
    Add String  key
    Add String  \r\n
    Add Decimal As Bits  63  6
    Add Decimal As Bits  3  6
    Add Decimal As Bits  10  4

Receive data and checks it exists
    ${message}=  Server Receives Data
    Should Not Be Empty  ${message}

receive and validate message with single decimal
    Server Receives Data
    ${flags}=  Read From Data  1
    Should Be Equal  ${flags}  72

Receive And Validate message with multiple decimals
    Server Receives Data
    ${flags}=  Read From Data  1
    ${message_length}=  Read From Data  2
    Should Be Equal  ${flags}  72
    Should Be Equal  ${message_length}  216

Receive And Validate Message With single binary decimal
    Server Receives Data
    ${value}=  Read Binary  8
    Should Be Equal  ${value}  255

Receive And Validate Message With multiple binary decimals
    Server Receives Data
    ${value1}=  Read Binary  6
    ${value2}=  Read Binary  6
    ${value3}=  Read Binary  4
    Should Be Equal  ${value1}  32
    Should Be Equal  ${value2}  40
    Should Be Equal  ${value3}  15

Receive And Validate Message With Strings and Decimals and Binary As Octets
    Server Receives Data
    ${value1}=  Read From Data  1
    ${value2}=  Read From Data  2
    Should Be Equal  ${value1}  255
    Should Be Equal  ${value2}  4
    ${value1}=  Read Binary  6
    ${value2}=  Read Binary  6
    ${value3}=  Read Binary  4
    Should Be Equal  ${value1}  63
    Should Be Equal  ${value2}  3
    Should Be Equal  ${value3}  10
    ${field1}=  Read String  delimiter=${SPACE}
    ${field2}=  Read String  delimiter=\r\n
    Should Be Equal  ${field1}  value
    Should Be Equal  ${field2}  key
    ${value1}=  Read Binary  6
    ${value2}=  Read Binary  6
    ${value3}=  Read Binary  4
    Should Be Equal  ${value1}  63
    Should Be Equal  ${value2}  3
    Should Be Equal  ${value3}  10

Receive And Validate message With Multiple String fields
    Server Receives Data
    ${field1}=  Read String  delimiter=${SPACE}
    ${field2}=  Read String  delimiter=\r\n
    Should Be Equal  ${field1}  field1
    Should Be Equal  ${field2}  field2

Receive and validate Message with single String field
    Server Receives Data
    ${test field}=  Get Message
    Should Be Equal  ${test field}  Test

Create And Send Message with single String field
    Reset Message
    Add String  Test
    Client Sends Data

Create and Send Message With Multiple String Fields
    Reset Message
    Add String  field1
    Add String  ${SPACE}
    Add String  field2
    Add String  \r\n
    Client Sends Data

Create and send Message with TBCD number
    [Arguments]  ${no1}  ${no2}
    Reset Message
    Add Tbcd  ${no1}  ${no2}
    Client Sends Data

Receive and validate message with TBCD number
    [Arguments]  ${length}  ${country code}  ${digits}
    Server Receives Data
    ${tbcd}=  read tbcd  ${length}
    Should start with  ${tbcd}  ${country code}
    Should end with  ${tbcd}  ${digits}

test scandinavian string with encoding
    [Arguments]  ${string}  ${encoding}
    reset message
    Add string  ${string}  encoding=${encoding}
    ${data}=  Read String  encoding=${encoding}
    Should Be Equal As Strings  ${data}  ${string}

