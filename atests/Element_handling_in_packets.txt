*** Settings ***
Suite Setup   
Suite Teardown
Test Setup      UDP Server and Client are initialized
Test Teardown   Close Connections
Default Tags    regression
Library         rammbock.Rammbock
Resource        resources/Messaging.txt

*** Test Cases ***
Encode message with decimal data as octets
    Create Message and Add Decimal as octets
    Client sends Data
    Receive data and checks it exists

Encode message with multiple decimal data elements as octets
    Create Message and add two decimals as octets
    Client Sends Data
    Receive data and checks it exists

Encode message with bitstream data as binary
    Create Message And Add Bitstream data
    Client sends data
    Receive data and checks it exists

Encode Message with multiple data fields containing bits
    Create Message And Add Multiple bitstream fields
    Client Sends Data
    Receive data and checks it exists

Try Encode too long decimal data as octets
    Create Message
    Run Keyword And Expect Error  Value is too big for length  Add Decimal As Octets  300  1

Try to encode too long decimal as bits
    Create Message
    Run Keyword And Expect Error  Value is too big for length  Add Decimal As Bits  256  1

Decode octets from message to single decimal
    Create Message and Add Decimal as octets
    Client sends Data
    receive and validate message with single decimal

Decode octets from message to decimals
    Create Message and add two decimals as octets
    Client sends Data
    Receive And Validate message with multiple decimals

Decode bits from message to single decimal
    Create Message And Add Bitstream data
    Client Sends Data
    Receive And Validate Message With single binary decimal

Decode bits from message to Multiple decimals
    Create Message And Add Multiple bitstream fields
    Client Sends Data
    Receive And Validate Message With multiple binary decimals

Encode And Decode message with string
    Create And Send Message with single String field
    Receive and validate Message with single String field

Encode And Decode message with multiple strings
    Create and Send Message With Multiple String Fields
    Receive And Validate message With Multiple String fields

Encode And Decode message with octets, bits and strings
    [Tags]  ${EMPTY}

*** Keywords ***
Create Message and add two decimals as octets
    Create Message
    Add Decimal as Octets  72  1
    Add Decimal as Octets  216  2

Create Message And Add Bitstream data
    Create Message
    Add decimal as bits  255  8
    Client Sends Data

Create Message And Add Multiple bitstream fields
    Create Message
    Add Decimal As Bits  32  6
    Add Decimal As Bits  40  6
    Add Decimal As Bits  15  4

Create Message and Add Decimal as octets
    Create Message
    Add Decimal as Octets  72  1

Receive data and checks it exists
    ${message}=  Server Receives Data
    Should Not Be Empty  ${message}

receive and validate message with single decimal
    Create Message
    Server Receives Data
    ${flags}=  Read From Data  1
    Should Be Equal  ${flags}  72

Receive And Validate message with multiple decimals
    Create Message
    Server Receives Data
    ${flags}=  Read From Data  1
    ${message_length}=  Read From Data  2
    Should Be Equal  ${flags}  72
    Should Be Equal  ${message_length}  216

Receive And Validate Message With single binary decimal
    Server Receives Data
    read to binary from data  1
    ${value}=  Read From binary  8
    Should Be Equal As Integers  ${value}  255

Receive And Validate Message With multiple binary decimals
    Server Receives Data
    Read To Binary From Data  2
    ${value1}=  Read From Binary  6
    ${value2}=  Read From Binary  6
    ${value3}=  Read From Binary  4
    Should Be Equal As Numbers  ${value1}  32
    Should Be Equal As Numbers  ${value2}  40
    Should Be Equal As Numbers  ${value3}  15

Receive And Validate message With Multiple String fields
    Server Receives Data
    ${field1}=  Read Until  ${SPACE}
    ${field2}=  Read Until  \r\n
    Should Be Equal  ${field1}  field1
    Should Be Equal  ${field2}  field2

Receive and validate Message with single String field
    Server Receives Data
    ${test field}=  Read Until
    Should Be Equal  ${test field}  Test

Create And Send Message with single String field
    Create Message
    Add String  Test
    Client Sends Data

Create and Send Message With Multiple String Fields
    Create Message
    Add String  field1
    Add String  ${SPACE}
    Add String  field2
    Add String  \r\n
    Client Sends Data

