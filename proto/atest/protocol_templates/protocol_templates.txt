*** Settings ***
Test Setup        Setup protocol, UDP server, and client
Test Teardown     Teardown rammbock and increment port numbers
Default Tags      regression
Resource          template_resources.txt

*** Test Cases ***
Define And Use A Message Template
    [Setup]    Define Simple Protocol
    Defined Protocol is usable in client

Undefined protocol cannot be used
    [Setup]    Define Simple Protocol
    Using undefined protocol in client fails

Using same field name twice fails
    [Setup]    Define Simple Protocol
    New message   Foo    Example
    u8     foo
    u8     bar
    Run keyword and expect error    *     u8    foo

Getting protocol name from client
    ${protocol}     get client protocol
    Should be equal    ${protocol}     Example

Client uses protocol and sends
    Client Sends simple request    value:0xcafebabe
    Verify server gets hex    0x 01 00 dddd 000c ffff cafebabe

Client uses protocol and receives
    Client sends request and server receives it
    Server Sends simple request    value:0xcafebabe
    ${msg} =    Client Receives simple request
    Should be equal    ${msg.value.hex}    0xcafebabe

Server uses protocol and sends
    Client sends request and server receives it
    Server Sends simple request    value:0xcafebabe
    Verify client gets hex    0x 01 00 dddd 000c ffff cafebabe

Server uses protocol and receives
    Client Sends hex    0x 01 00 dddd 000c 0000 cafebabe
    ${msg} =    Server Receives simple request
    Should be equal    ${msg.value.hex}    0xcafebabe

Server uses protocol with header field values and receives
    Client Sends hex    0x 01 00 dddd 000c 0000 cafebabe
    ${msg} =    Server Receives simple request with header    messageType:0xdddd
    Should be equal    ${msg.value.hex}    0xcafebabe

Server uses protocol and messages arrive out of order
    Client Sends hex    0x 01 00 aaaa 000c 0000 deadbeef
    Client Sends hex    0x 01 00 dddd 000c 0000 cafebabe
    ${msg_dddd} =    Server Receives simple request with header    messageType:0xdddd    flags:0xffff
    Should be equal    ${msg_dddd._header.messageType.hex}    0xdddd

Message field type conversions
    Client Sends hex    0x 01 00 dddd 000c 0000 000000ff
    ${msg} =    Server Receives simple request    value:0x000000ff
    Should be equal    ${msg.value.hex}    0x000000ff
    Should be equal as integers    ${msg.value.int}    255

Access header
    Client Sends hex    0x 01 00 dddd 000c 0000 000000ff
    ${msg} =    Server Receives simple request
    Should be equal    ${msg._header.version.hex}    0x01
    Should be equal as integers    ${msg._header.length.int}    12

Char fields
    Client sends charred request
    ${msg} =    Server receives charred request
    Should be equal    ${msg.string_value.ascii}    foo

Field alignment
    Client sends aligned request    aligned_8bit_field:0xff
    ${msg}=    Server receives aligned request
    Should be equal    ${msg.aligned_8bit_field.hex}    0xff
    Binary should equal hex    ${msg.aligned_8bit_field._raw}    0xff000000

Starting new protocol in middle of old protocol definition fails
    start protocol description    foo
    Run keyword and expect error    *    start protocol description    bar

Redifining protocol fails
    start protocol description    foo
    uint    1    length
    pdu    length
    end protocol description
    run keyword and expect error    *    start protocol description    foo

Defining message while defining protocol fails
    start protocol description    foo
    run keyword and expect error    *    new message    foo

Error when giving non-ascii parameters
    Run keyword and expect error    Only ascii characters are supported in parameters.    New message    ValueRequest    Example    mess√§geType:0xdddd

Overriding header parameters in send
    Client sends simple request    header:flags:0xcafe
    ${msg}=    Server receives simple request
    Should be equal    0xcafe    ${msg._header.flags.hex}

Resetting message stream cache
    Client sends simple request
    Reset message streams
    Server receive for simple request will timeout


*** Keywords ***
Server receive for simple request will timeout
    Run keyword and expect error    timeout: timed out    Server Receives simple request    timeout=0.1

Server Receives simple request with header
    [Arguments]    @{header params}
    New message    ValueRequest    Example    @{header params}
    u32    value
    ${msg} =    Server receives message    header_filter=messageType
    [Return]    ${msg}

AlignedRequest
    New message    AlignedRequest    Example    messageType:0xf000
    u8    aligned_8bit_field    align=4

Client sends aligned request
    [Arguments]    @{params}
    AlignedRequest
    Client sends message    @{params}

Server receives aligned request
    [Arguments]    @{params}
    AlignedRequest
    ${msg}=    Server receives message    @{params}
    [Return]    ${msg}


