*** Settings ***
Test Setup        Define example protocol
Test Teardown     Teardown rammbock and increment port numbers
Default Tags      regression
Resource          ../Protocols.txt

*** Test Cases ***
encoding single value with even amount of numbers
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   4    digits    1234
    end tbcd container
    ${msg}=    Get Message
    should be equal    ${msg.tbcd_cont.digits.tbcd}    1234

decoding single value with even amount of numbers
    [Setup]    Define protocol, start tcp server and two clients    Example
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   4    digits    1234
    end tbcd container
    client sends message
    ${msg}=    server receives message
    should be equal    ${msg.tbcd_cont.digits.tbcd}    1234

decoding single value with odd amount of numbers
    [Setup]    Define protocol, start tcp server and two clients    Example
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   3    digits    123
    end tbcd container
    client sends message
    ${msg}=    server receives message
    should be equal    ${msg.tbcd_cont.digits.tbcd}    123

decoding multiple values with even amount of numbers
    [Setup]    Define protocol, start tcp server and two clients    Example
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   4    first_four    1234
    tbcd   4    last_four     5678
    end tbcd container
    client sends message
    ${msg}=    server receives message
    should be equal    ${msg.tbcd_cont.first_four.tbcd}    1234
    should be equal    ${msg.tbcd_cont.last_four.tbcd}     5678

decoding multiple values with odd amount of numbers
    [Setup]    Define protocol, start tcp server and two clients    Example
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   4    first_four    1234
    tbcd   3    last_four     567
    end tbcd container
    client sends message
    ${msg}=    server receives message
    should be equal    ${msg.tbcd_cont.first_four.tbcd}    1234
    should be equal    ${msg.tbcd_cont.last_four.tbcd}     567

decoding multiple values with odd amount of numbers in another way
    [Setup]    Define protocol, start tcp server and two clients    Example
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   3    first_four    123
    tbcd   4    last_four     4567
    end tbcd container
    client sends message
    ${msg}=    server receives message
    should be equal    ${msg.tbcd_cont.first_four.tbcd}    123
    should be equal    ${msg.tbcd_cont.last_four.tbcd}     4567

encoding single value with odd amount of numbers
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   5    digits    12345
    end tbcd container
    ${msg}=    Get Message
    should be equal    ${msg.tbcd_cont.digits.tbcd}    12345

encoding multiple values with even amount of numbers
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   4    first     1234
    tbcd   4    second    5678
    end tbcd container
    ${msg}=    Get Message
    should be equal    ${msg.tbcd_cont.first.tbcd}     1234
    should be equal    ${msg.tbcd_cont.second.tbcd}    5678

encoding multiple values with odd amount of numbers
    New message    tbcd testing    Example    messageType:0xdddd
    new tbcd container    tbcd_cont
    tbcd   4    first     1234
    tbcd   5    second    56789
    end tbcd container
    ${msg}=    Get Message
    should be equal    ${msg.tbcd_cont.first.tbcd}     1234
    should be equal    ${msg.tbcd_cont.second.tbcd}    56789
