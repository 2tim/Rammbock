*** Settings ***
Test Setup        Setup protocol, UDP server, and client
Test Teardown     Teardown rammbock and increment port numbers
Default Tags      regression
Resource          Protocols.txt

*** Test Cases ***
Define And Use A Message Template
    [setup]  Define Simple Protocol
    Defined Protocol is usable in client

Undefined protocol cannot be used
    [setup]  Define Simple Protocol
    Using undefined protocol in client fails

Client uses protocol and sends
    Client Sends simple request    value:0xcafebabe
    Verify server gets hex    0x 01 00 dddd 000c ffff cafebabe

Client uses protocol and receives
    Client sends request and server receives it
    Server Sends simple request    value:0xcafebabe
    ${msg} =    Client Receives simple request
    Should be equal    ${msg.value.hex}    0xcafebabe

Server uses protocol and sends
    Client sends request and server receives it
    Server Sends simple request    value:0xcafebabe
    Verify client gets hex    0x 01 00 dddd 000c ffff cafebabe

Server uses protocol and receives
    Client Sends hex    0x 01 00 dddd 000c 0000 cafebabe
    ${msg} =    Server Receives simple request
    Should be equal    ${msg.value.hex}    0xcafebabe

UDP Server uses protocol and receives with pattern validation
    Client Sends hex    0x 01 00 dddd 000c 0000 00000005
    ${msg} =    Server Receives simple request   value:(4|5)
    Should be equal    ${msg.value.hex}    0x00000005

TCP server uses protocol and receives with pattern validation
    [Setup]  Setup protocol, TCP server, and client
    Client Sends simple request
    Server Receives simple request

TCP server receives from two clients with pattern validation
    [Setup]    Define protocol, start tcp server and two clients    Example
    Named client sends simple request    ExampleClient1    value:0xcafebabe
    Named client sends simple request    ExampleClient2    value:0xdeadbeef
    Server Receives simple request from named connection    Connection2    value:0xdeadbeef
    Server Receives simple request from named connection    Connection1    value:0xcafebabe

Server uses protocol and receives with pattern validation failing
    Client Sends hex    0x 01 00 dddd 000c 0000 00000005
    Run keyword and expect error    Value of field value does not match *   Server Receives simple request   value:(4|6)

Server uses protocol with header field values and receives
    Client Sends hex    0x 01 00 dddd 000c 0000 cafebabe
    ${msg} =    Server Receives simple request with header    messageType:0xdddd
    Should be equal    ${msg.value.hex}    0xcafebabe

Server uses protocol and value validation fails
    Client Sends hex    0x 01 00 dddd 000c 0000 cafebabe
    Run keyword and expect error    Value of field value does not match *    Server Receives simple request    value:0xffffff

Server uses protocol and messages arrive out of order
    Client Sends hex    0x 01 00 aaaa 000c 0000 deadbeef
    Client Sends hex    0x 01 00 dddd 000c 0000 cafebabe
    ${msg_dddd} =      Server Receives simple request with header    messageType:0xdddd
    Should be equal    ${msg_dddd._header.messageType.hex}    0xdddd

Message field type conversions
    Client Sends hex    0x 01 00 dddd 000c 0000 000000ff
    ${msg} =    Server Receives simple request    value:0x000000ff
    Should be equal    ${msg.value.hex}    0x000000ff
    Should be equal as integers    ${msg.value.int}    255

Access header
    Client Sends hex    0x 01 00 dddd 000c 0000 000000ff
    ${msg} =    Server Receives simple request
    Should be equal    ${msg._header.version.hex}    0x01
    Should be equal as integers    ${msg._header.length.int}    12

Char fields
    Client sends charred request
    ${msg} =   Server receives charred request
    Should be equal   ${msg.string_value.ascii}    foo

Char field validation passes
    Client sends charred request
    ${msg} =   Server receives charred request     string_value:foo
    Should be equal   ${msg.string_value.ascii}    foo

Char field validation fails
    Client sends charred request
    Run keyword and expect error   Value of field string_value does not match *    Server receives charred request     string_value:bar

Char field validation passes with pattern
    Client sends charred request
    ${msg} =   Server receives charred request     string_value:(bar|foo)
    Should be equal   ${msg.string_value.ascii}    foo

*** Keywords ***
Client Sends simple request
    [Arguments]    @{params}
    New message    ValueRequest  Example    messageType:0xdddd    flags:0xffff
    u32    value    0xdeadbeef
    Client Sends message    @{params}

Named client sends simple request
    [Arguments]    ${client}=   @{params}
    New message    ValueRequest  Example    messageType:0xdddd    flags:0xffff
    u32    value    0xdeadbeef
    Client Sends message   name=${client}   @{params}

Server Sends simple request
    [Arguments]    @{params}
    New message    ValueRequest  Example    messageType:0xdddd    flags:0xffff
    u32    value    0xdeadbeef
    Server Sends message    @{params}

Server Receives simple request from named connection
    [Arguments]    ${connection}=  @{params}
    New message    ValueRequest   Example
    u32    value
    ${msg} =    Server receives message    connection=${connection}  @{params}
    [return]    ${msg}

Server Receives simple request
    [Arguments]    @{params}
    New message    ValueRequest   Example
    u32    value
    ${msg} =    Server receives message    @{params}
    [return]    ${msg}

Server Receives simple request with header
    [Arguments]    @{header params}
    New message    ValueRequest   Example    @{header params}
    u32    value
    ${msg} =    Server receives message
    [return]    ${msg}

Client Receives simple request
    [Arguments]    @{params}
    New message    ValueRequest   Example
    u32    value
    ${msg} =    Client receives message    @{params}
    [return]    ${msg}

Client sends request and server receives it
    Client Sends simple request
    Verify server gets hex    0x 01 00 dddd 000c ffff deadbeef

Client sends charred request
    [Arguments]    @{params}
    New message    CharredRequest  Example    messageType:0xf000
    char    16     string_value   foo
    Client sends message    @{params}

Server receives charred request
    [Arguments]    @{params}
    New message    CharredRequest  Example    messageType:0xf000
    char    16     string_value
    ${msg} =   Server receives message    @{params}
    [return]     ${msg}

u32
    [arguments]     ${name}   ${default_value}=""
    uint  4   ${name}   ${default_value}