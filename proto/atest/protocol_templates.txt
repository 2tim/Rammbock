*** Settings ***
Test Setup        Setup protocol, server, and client
Test teardown     Reset rammbock
Library           Rammbock.py
Resource          Protocols.txt

*** Variables ***
${TEST MACHINE}   127.0.0.1
${SERVER}         ${TEST MACHINE}
${CLIENT}         ${TEST MACHINE}
${SERVER PORT}    54321
${CLIENT 1 PORT}  45678
${CLIENT 2 PORT}  45679

*** Test Cases ***
Client uses protocol and sends
    Client Sends simple request    value=0xcafebabe
    Verify server gets    0x 01 00 dddd 000c ffff cafebabe

Server uses protocol and receives
    Client Sends hex    0x 01 00 dddd 0c 0000 cafebabe
    ${msg} =    Server Receives simple request    value=0xcafebabe
    Should be equal    ${msg.value.hex}    0xcafebabe

Server uses protocol and value validation fails
    Client Sends hex    0x 01 00 dddd 0c 0000 cafebabe
    Run keyword and expect error    *    Server Receives simple request    value=0xffffff

Server uses protocol and messages arrive out of order
    Client Sends hex    0x 01 00 aaaa 0c 0000 deadbeef
    Client Sends hex    0x 01 00 dddd 0c 0000 cafebabe
    ${msg dddd} =    Server Receives simple request
    Should be equal    ${msg dddd._header.messageType.hex}    0xdddd

Message field type conversions
    Client Sends hex    0x 01 00 dddd 0c 0000 000000ff
    ${msg} =    Server Receives simple request    value=0xcafebabe
    Should be equal    ${msg.value.hex}    0x000000ff
    Should be equal as integers    ${msg.value.int}    255
    Should be equal    ${msg.value.bytes}    \x00\x00\x00\xff

Access header
    Client Sends hex    0x 01 00 dddd 0c 0000 000000ff
    ${msg} =    Server Receives simple request    value=0xcafebabe
    Should be equal    ${msg._header.version.hex}    0x01
    Should be equal as integers    ${msg._header.length.int}    12

Multiple clients
    [Setup]    Define example protocol
    Start udp client    _ip=${CLIENT}    _port=${CLIENT 1 PORT}    _name=Client_1     _protocol=Example
    Start udp client    _ip=${CLIENT}    _port=${CLIENT 2 PORT}    _name=Client_2     _protocol=Example
    Start udp server    ${SERVER}    ${SERVER PORT}    _name=ExampleServer  _protocol=Example
    Client Connects    ${SERVER}    ${SERVER PORT}    _name=Client_1
    Client Connects    ${SERVER}    ${SERVER PORT}    _name=Client_2
    Client Sends simple request    value=0xcafebabe   _name=Client_1
    Client Sends simple request    value=0xdeadbeef   _name=Client_2
    Verify server gets from    ${CLIENT}    ${CLIENT 1 PORT}     0x 01 00 dddd 000c ffff cafebabe
    Verify server gets from    ${CLIENT}    ${CLIENT 2 PORT}     0x 01 00 dddd 000c ffff deadbeef


*** Keywords ***
Client Sends simple request
    [Arguments]     @{params}
    New message     Example    messageType=0xdddd    flags=0xffff
    u32    value    0xdeadbeef
    Client Sends message    @{params}

Server Receives simple request
    [Arguments]    @{params}
    New message    Example    messageType=0xdddd    #messageType=(0xdd|0xff)
    u32    value
    ${msg} =    Server receives message    @{params}

Verify server gets
    [Arguments]    ${expected hex}
    ${msg} =    Server receives binary
    Binary should equal hex    ${msg}    ${expected hex}

Verify server gets from
    [Arguments]    ${ip}  ${port}  ${expected hex}
    ${from ip}   ${from port}   ${msg} =    Server receives binary from
    Binary should equal hex    ${msg}    ${expected hex}
    Should be equal    ${from ip}    ${ip}
    Should be equal    ${from port}  ${port}

Binary should equal hex
    [arguments]      ${binary}    ${expected hex}
    ${binary in hex} =    bin to hex    ${binary}
    ${expected normalized} =   Normalize hex   ${expected hex}
    Should be equal    ${binary in hex}    ${expected normalized}

Normalize hex
    [Arguments]    ${hex}
    ${bin} =     Hex to bin    ${hex}
    ${normalized}   Bin to hex    ${bin}
    [return]       ${normalized}
