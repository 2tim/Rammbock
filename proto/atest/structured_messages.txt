*** Settings ***
Test Setup        Setup protocol, UDP server, and client
Test teardown     Teardown rammbock and increment port numbers
Library           Rammbock.py
Resource          Protocols.txt
Default Tags      Regression

*** Variables ***
${HEADER} =    0x0100aaaa000f0000

*** Test Cases ***
Message with struct
    Client sends request with struct     pair.first:0xba   pair.second:0xbe
    ${msg} =    Server receives request with struct
    Should be equal    ${msg.pair.first.hex}     0xba
    Should be equal    ${msg.pair.second.hex}    0xbe

Validate with struct
    Client sends request with struct     pair.first:0xba   pair.second:0xbe
    Server receives request with struct    pair.first:0xba

Fail validation with struct
    Client sends request with struct     pair.first:0xba   pair.second:0xbe
    Server should fail validation with struct    pair.first:0xff

Message with list
    Client sends request with list
    ${msg} =    Server receives request with list    someList[2]:3
    Should be equal as integers    ${msg.someList[4].int}     3

Message with list validation fails
    Client sends request with list
    Server should fail validation with list   someList[2]:4

Receive dynamic message
    Client Sends hex    ${HEADER} 03 cafe babe d00d
    ${msg} =    Server Receives dynamic request
    Should be equal    ${msg.pairList[0].first.hex}     0xca
    Should be equal    ${msg.pairList[0].second.hex}    0xfe
    Should be equal    ${msg.pairList[2].first.hex}     0xd0

Encode dynamic message
    Populate dynamic message  2  0x01  0x02  0x11  0x22
    ${msg} =    Get message
    Should be equal    ${msg.pairList[0].first.hex}     0x01
    Should be equal    ${msg.pairList[0].second.hex}    0x02
    Should be equal    ${msg.pairList[1].first.hex}     0x11

Reuse struct in another message
    [Tags]
    Populate dynamic message  2  0x01  0x02  0x11  0x22
    ${list msg} =    Get message
    Value       pair     ${list msg.pairList[0]}
    Message with struct
    ${pair msg} =    Get message
    Should be equal    ${pair msg.pair.first.hex}     0x01

Encoding dynamic message without length fails
    # TODO: This should perhaps work?
    Populate dynamic message  ${EMPTY}  0x01  0x02  0x11  0x22
    Run keyword and expect error   Value of numberOfPairs not set    Get message

Encoding dynamic message with extra list entries fails
    Populate dynamic message  1  0x01  0x02  0x11  0x22
    Run keyword and expect error   Unknown fields in pairList *   Get message

Struct containing struct
    Client sends struct with struct   structstruct.mollyMalones.closesAt:4
    ${msg} =    Server Receives struct with struct  structstruct.mollyMalones.closesAt:
    Should be equal as integers   ${msg.structstruct.mollyMalones.closesAt.int}   4

Unfinished struct fails
    New message   ExampleMessage   Example   messageType:0xbabe
    Struct  MyStruct  myStruct
    u8    foo
    Get message fails because 'myStruct' is not completed

Pass value dict to Struct
   New message   FooExample   Example    messageType:0xb0b0
   define struct    fooName.first:1    fooName.second:2
   ${msg}   Get message
   Should be equal     ${msg.fooName.first.hex}    0x01
   Should be equal     ${msg.fooName.second.hex}   0x02
   Should be equal     ${msg.fooName.third.hex}    0xff

Pass value dict to Struct but replace it in Get Message
   New message   FooExample   Example    messageType:0xb0b0
   define struct    fooName.first:1    fooName.second:2
   ${msg}   Get message    fooName.second:0x22
   Should be equal     ${msg.fooName.first.hex}    0x01
   Should be equal     ${msg.fooName.second.hex}   0x22
   Should be equal     ${msg.fooName.third.hex}    0xff

Use struct length in field
    [tags]
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field
    container    container    length_field    u8    field    0x00
    ${msg}    get message
    should be equal as integers    ${msg.length_field.int}    1

Use struct length in field with value set and matching
    [tags]
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field
    container    container    length_field    u8    field    0x00
    ${msg}    get message   length_field:1
    should be equal as integers    ${msg.length_field.int}    1

Use struct length in field with value too large
    [tags]
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field
    container    container    length_field    u8    field    0x00
    Should fail    get message   length_field:5

Use struct length in field with value too small
    [tags]
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field    1
    container    container    length_field    u16    field    0x00
    Should fail    get message

Get dynamic length from value when encoding
    New message   FooExample  Example   messageType:0xb0b0
    u8    length_field
    chars    length_field     name
    ${msg}=    get message    name:ilmari
    Should be equal as integers    ${msg.length_field.int}    6

Too short dynamic length fails
    New message   FooExample  Example   messageType:0xb0b0
    u8    length_field    1
    chars    length_field     name
    Should fail   get message    name:ilmari

Variable length container with multiple fields
    [tags]
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field
    container    container    length_field    multiple fields
    ${msg}=    get message
    should be equal as integers    ${msg.length_field.int}    10

Variable length container with dynamic length content
    [tags]
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field
    container    container    length_field    Dynamic string
    ${msg}=    get message    container.name:fobbabobba
    should be equal as integers    ${msg.length_field.int}    11
    should be equal as integers    ${msg.container.stringLen.int}   10


*** Keywords ***
multiple fields
    u8    value1    1
    u8    value2    2
    u32   value3    2
    u32   value4    2

Client sends request with struct
    [Arguments]    @{params}
    Message with struct
    Client sends message   @{params}

Client sends request with list
    [Arguments]    @{params}
    List message
    Client sends message   @{params}

Client sends struct with struct
    [Arguments]    @{params}
    Message with struct in struct
    Client sends message   @{params}

Server receives request with struct
    [Arguments]    @{params}
    Message with struct
    ${msg} =    Server Receives message    @{params}
    [return]    ${msg}

Server Receives struct with struct
    [Arguments]    @{params}
    Message with struct in struct
    ${msg} =    Server Receives message    @{params}
    [return]    ${msg}

Server should fail validation with struct
    [Arguments]    @{params}
    Run keyword and expect error     Value of field first does not *    Server receives request with struct    @{params}

Server receives request with list
    [Arguments]    @{params}
    List message
    ${msg} =    Server Receives message    @{params}
    [return]    ${msg}

Server should fail validation with list
    [Arguments]    @{params}
    Run keyword and expect error     Value of field *    Server receives request with list    @{params}

Server Receives dynamic request
    [Arguments]    @{params}
    Dynamic message
    ${msg} =    Server Receives message    @{params}
    [return]    ${msg}

Populate dynamic message
    [Arguments]   ${len}  ${0 first}  ${0 second}  ${1 first}  ${1 second}
    Dynamic Message
    value   numberOfPairs   ${len}
    value   pairList[0].first   ${0 first}
    value   pairList[0].second   ${0 second}
    value   pairList[1].first   ${1 first}
    value   pairList[1].second   ${1 second}

List message
    New message    ListRequest    Example    messageType:0xaaaa
    Array   5    u32    someList    3

Dynamic message
    New Message    DynamicRequest  Example    messageType:0xaaaa
    Dynamic pair array

Dynamic pair array
    u8      numberOfPairs
    Array   numberOfPairs    Pair    pairList

Dynamic string
    u8     stringLen
    Chars    stringLen   name

Message with struct
    New Message    StructRequest  Example    messageType:0xaaaa
    Pair    pair

Array
    [arguments]    ${size}    ${type}    ${name}    ${value}=
    New List       ${size}    ${name}
    Run keyword    ${type}    ${EMPTY}   ${value}
    End List

Container
    [arguments]    ${name}    ${length field}    ${type}    @{params to type}
    struct    Container    ${name}
    Run keyword    ${type}    @{params to type}
    end struct    ${length field}

Pair
    [arguments]     ${name}=     ${value}=
    Struct    Pair    ${name}
    u8    first       ${value}
    u8    second      ${value}
    End struct

Message with struct in struct
    New Message   StructStruct   Example    messageType:0xaaaa
    StructStruct   structstruct

StructStruct
    [Arguments]    ${name}
    Struct   StructStruct   ${name}
    u32      foo    6
    Bar      mollyMalones
    End struct

Bar
    [Arguments]    ${name}
    Struct   Bar   ${name}
    u8        opensAt    10
    u8        closesAt    2
    End struct

Get message fails because '${name}' is not completed
    Run keyword and expect error   Message definition not complete. ${name} not completed.  Get message    

Should fail    [Arguments]    @{args}
    run keyword and expect error   *   @{args}

define struct
   [arguments]     @{params}
   Struct    FooType   fooName    @{params}
   u8    first      0xff
   u8    second     0xff
   u8    third      0xff
   End Struct