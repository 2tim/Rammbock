*** Settings ***
Library     Rammbock
Variables   ports.py


*** Variables ***
${TEST MACHINE}   127.0.0.1
${SERVER}         ${TEST MACHINE}
${CLIENT}         ${TEST MACHINE}


*** Keywords ***
Define example protocol
    Start Protocol Description    Example
    u8    version    0x01
    u8    reserved    0x00
    u16    messageType    # Empty on purpose, each message template defines the type for it
    u16    length         # Empty on purpose, the length is pdu length
    u16    flags    0x0000
    pdu    length-8
    End protocol description

Setup TCP server and client  [arguments]   ${protocol}=
    Start TCP server    ${SERVER}    ${SERVER PORT}    _name=ExampleServer   _protocol=${protocol}
    Start TCP client    _name=ExampleClient
    connect    ${SERVER}    ${SERVER PORT}    _name=ExampleClient
    Accept connection  _name=ExampleServer

Setup UDP server and client  [arguments]  ${protocol}=
    Start udp server    ${SERVER}    ${SERVER PORT}    _name=ExampleServer  _protocol=${protocol}
    Start udp client    _name=ExampleClient     _protocol=Example
    connect    ${SERVER}    ${SERVER PORT}    _name=ExampleClient
    
Setup protocol, UDP server, and client
    Define example protocol
    Setup UDP server and client
    
Start two udp clients
    Start udp client    _ip=${CLIENT}    _port=${CLIENT 1 PORT}    _name=Client_1     _protocol=Example
    Start udp client    _ip=${CLIENT}    _port=${CLIENT 2 PORT}    _name=Client_2     _protocol=Example

Start two tcp clients
    Start tcp client    _ip=${CLIENT}    _port=${CLIENT 1 PORT}    _name=Client_1     _protocol=Example
    Start tcp client    _ip=${CLIENT}    _port=${CLIENT 2 PORT}    _name=Client_2     _protocol=Example

Connect two clients
    [Arguments]    ${server port 1}     ${server port 2}
    connect    ${SERVER}    ${server port 1}    _name=Client_1
    connect    ${SERVER}    ${server port 2}    _name=Client_2

Verify server gets hex
    [Arguments]    ${expected hex}
    ${msg} =    Server receives binary
    Binary should equal hex    ${msg}    ${expected hex}

Verify server gets from
    [Arguments]    ${ip}  ${port}  ${expected}   ${server}   ${connection}=
    ${msg}   ${from ip}   ${from port} =    Server receives binary from     _name=${server}   _connection=${connection}
    Should be equal    ${msg}    ${expected}
    Should be equal    ${from ip}    ${ip}
    Should be equal as integers    ${from port}  ${port}

Binary should equal hex
    [arguments]      ${binary}    ${expected hex}
    ${binary in hex} =    bin to hex    ${binary}
    ${expected normalized} =   Normalize hex   ${expected hex}
    Should be equal    ${binary in hex}    ${expected normalized}

Normalize hex
    [Arguments]    ${hex}
    ${bin} =     Hex to bin    ${hex}
    ${normalized}   Bin to hex    ${bin}
    [return]       ${normalized}

Client Sends hex
    [Arguments]    ${hex}    @{params}
    ${binary} =    Hex to bin    ${hex}
    Client Sends binary    ${binary}    @{params}

U8
    [Arguments]    ${name}    ${value}=${NONE}
    uint     1     ${name}    ${value}

U16
    [Arguments]    ${name}    ${value}=${NONE}
    uint     2     ${name}    ${value}

Teardown rammbock and increment port numbers
    Reset Rammbock
    Increment ports

Increment ports
    Increment port    SERVER PORT
    Increment port    SERVER PORT 2
    Increment port    CLIENT 1 PORT
    Increment port    CLIENT 2 PORT

Increment port   [Arguments]   ${name}
    ${new} =    Evaluate   ${${name}}+2
    Set suite variable    ${${name}}    ${new}
