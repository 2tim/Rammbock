*** Settings ***
Test Setup        Setup protocol, UDP server, and client
Test teardown     Teardown rammbock and increment port numbers
Resource          ../Protocols.txt
Default Tags      Regression

*** Variables ***
${HEADER} =    0x0100aaaa000f0000

*** Test Cases ***
Receive dynamic message
    Client Sends hex    ${HEADER} 03 cafe babe d00d
    ${msg} =    Server Receives dynamic request
    Should be equal    ${msg.pairList[0].first.hex}     0xca
    Should be equal    ${msg.pairList[0].second.hex}    0xfe
    Should be equal    ${msg.pairList[2].first.hex}     0xd0

Encode dynamic message
    Populate dynamic message  2  0x01  0x02  0x11  0x22
    ${msg} =    Get message
    Should be equal    ${msg.pairList[0].first.hex}     0x01
    Should be equal    ${msg.pairList[0].second.hex}    0x02
    Should be equal    ${msg.pairList[1].first.hex}     0x11

Encoding dynamic list without defined length fails
    # TODO: This should perhaps work?
    Populate dynamic message  ${EMPTY}  0x01  0x02  0x11  0x22
    Run keyword and expect error   Value of numberOfPairs not set    Get message

Encoding dynamic message with extra list entries fails
    Populate dynamic message  1  0x01  0x02  0x11  0x22
    Run keyword and expect error   Unknown fields in pairList *   Get message

Encoding length in 2byte struct matches
    [Template]       2byte struct with given length
    #struct length    #length field value
    length_field
    length_field      2
    2                 2
    length_field-10   12

Encoding length in 2byte struct does not match
    [Template]       2byte struct with given length should fail
    #struct length   #length field value
    length_field     5
    length_field     1
    3                2
    1                2
    length_field-10  2
    length_field-10  13

Decoding length in 2byte struct matches
    [Template]       Decode 2byte struct with given length
    #struct length    #length field value
    length_field
    length_field      2
    2                 2
    length_field+1    1
    length_field-10   12

Decoding length in 2byte struct does not match
    [Template]       Decode 2byte struct with given length should fail
    #struct length   #length field value
    length_field     5
    length_field     1
    3                2
    1                2
    length_field-10  2
    length_field-10  13
    length_field+1   0
    length_field+50  0

Encoding dynamic length from value
    [Template]    Dynamic length fields with different parameters
    #static length field value     kw for dynamic content creation    kw to validate outcome and params
    ${none}                        static named chars field           get message and validate length field      ilmari        6
    8                              static named chars field           get message and validate length field      ilmari        8
    1                              static named chars field           get message and validate length field      ilmari        8    length_field:8
    1                              static named chars field           get message and validate length field      ilmari        6    length_field:6
    6                              static named chars field           get message and validate length field      ilmari        6

Encoding too short dynamic length fails
    [Template]    Dynamic length fields with different parameters
    #static length field value     kw for dynamic content creation    kw to validate outcome and params
    1                              static named chars field           should fail    get message        name:ilmari
    0                              static named chars field           should fail    get message        name:ilmari
    1                              static named chars field           should fail    get message        name:ilmari  length_field:2
    6                              static named chars field           should fail    get message        name:ilmari  length_field:2

Encoding variable length container with multiple fields
    Define variable length container    multiple fields
    ${msg}=    get message
    should be equal as integers    ${msg.length_field.int}    10

Encoding variable length container with dynamic length content
    Define variable length container    Dynamic string
    ${msg}=    get message    container.name:fobbabobba
    should be equal as integers    ${msg.length_field.int}    11
    should be equal as integers    ${msg.container.stringLen.int}   10

Decoding variable length container with dynamic length content
    Define variable length container    Dynamic string
    Client sends message    container.name:fobbabobba
    ${msg} =       Server receives message
    should be equal as integers    ${msg.length_field.int}    11
    should be equal as integers    ${msg.container.stringLen.int}   10


*** Keywords ***
Pair
    [arguments]     ${name}=     ${value}=
    New Struct    Pair    ${name}
    u8    first       ${value}
    u8    second      ${value}
    End struct

Server Receives dynamic request
    [Arguments]    @{params}
    Dynamic message
    ${msg} =    Server Receives message    @{params}
    [return]    ${msg}

Populate dynamic message
    [Arguments]   ${len}  ${0 first}  ${0 second}  ${1 first}  ${1 second}
    Dynamic Message
    value   numberOfPairs   ${len}
    value   pairList[0].first   ${0 first}
    value   pairList[0].second   ${0 second}
    value   pairList[1].first   ${1 first}
    value   pairList[1].second   ${1 second}

Dynamic message
    New Message    DynamicRequest  Example    messageType:0xaaaa
    Dynamic pair array

Dynamic pair array
    u8      numberOfPairs
    Array   numberOfPairs    Pair    pairList

Dynamic string
    u8     stringLen
    Chars    stringLen   name

Define variable length container
    [Arguments]    ${content}
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field
    container    container    length_field     ${content}
    u16   field_after_container       0xcafe

2byte struct with given length
    [Arguments]     ${struct length}    ${length field value}=
    define 2byte struct    ${struct length}
    ${msg}    get message   length_field:${length field value}
    ${length field value}=    Evaluate    '${length field value}' or 2
    Should be equal as integers    ${msg.length_field.int}   ${length field value}

2byte struct with given length should fail
    [Arguments]     ${struct length}    ${length field value}
    define 2byte struct    ${struct length}
    Should fail    get message   length_field:${length field value}

Decode 2byte struct with given length
    [Arguments]     ${struct length}    ${length field value}=
    define 2byte struct    ${struct length}
    Client sends message   length_field:${length field value}
    ${msg}     Server receives message
    ${length field value}=    Evaluate    '${length field value}' or 2
    Should be equal as integers    ${msg.length_field.int}   ${length field value}

Decode 2byte struct with given length should fail
    [Arguments]     ${struct length}    ${length field value}
    define 2byte struct    ${EMPTY}
    Client sends message   length_field:${length field value}
    define 2byte struct    ${struct length}
    Should fail     Server receives message

define 2byte struct
    [Arguments]     ${length}
    New message   FooExample   Example    messageType:0xb0b0
    u8    length_field
    container    container    ${length}    u16    field    0x00

multiple fields
    u8    value1    1
    u8    value2    2
    u32   value3    2
    u32   value4    2

Dynamic length fields with different parameters
    [arguments]    ${static length field value}    ${kw for dynamic content creation}    @{kw to validate outcome and params}
    New message   FooExample  Example   messageType:0xb0b0
    u8    length_field    ${static length field value}
    Run keyword    ${kw for dynamic content creation}
    run keyword    @{kw to validate outcome and params}

static named chars field
    run keyword    chars    length_field    name

get message and validate length field
    [arguments]       ${value}    ${valid length}    @{args for get msg}
    ${msg}=   get message    name:${value}    @{args for get msg}
    should be equal as integers    ${msg.length_field.int}    ${valid length}