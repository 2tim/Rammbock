*** Settings ***
Test Setup        Setup protocol, UDP server, and client
Test teardown     Teardown rammbock and increment port numbers
Resource          ../Protocols.txt
Default Tags      Regression

*** Variables ***
${HEADER} =    0x0100aaaa000f0000

*** Test Cases ***
Message with struct
    Client sends request with struct     pair.first:0xba   pair.second:0xbe
    ${msg} =    Server receives request with struct
    Should be equal    ${msg.pair.first.hex}     0xba
    Should be equal    ${msg.pair.second.hex}    0xbe

Validate with struct
    Client sends request with struct     pair.first:0xba   pair.second:0xbe
    Server receives request with struct    pair.first:0xba

Fail validation with struct
    Client sends request with struct     pair.first:0xba   pair.second:0xbe
    Server should fail validation with struct    pair.first:0xff

Reuse struct in another message
    [Tags]
    Message with struct     42
    ${struct msg} =    Get message
    Message with struct     1
    Value       pair     ${struct msg.pair}
    ${pair msg} =    Get message
    Should be equal as integers    ${pair msg.pair.first.int}     42

Struct containing struct
    Client sends struct with struct   structstruct.mollyMalones.closesAt:4
    ${msg} =    Server Receives struct with struct  structstruct.mollyMalones.closesAt:
    Should be equal as integers   ${msg.structstruct.mollyMalones.closesAt.int}   4

Unfinished struct fails
    New message   ExampleMessage   Example   messageType:0xbabe
    New Struct  MyStruct  myStruct
    u8    foo
    Get message fails because 'myStruct' is not completed

Pass value dict to Struct
   New message   FooExample   Example    messageType:0xb0b0
   define struct    first:1    second:2
   ${msg}   Get message
   Should be equal     ${msg.fooName.first.hex}    0x01
   Should be equal     ${msg.fooName.second.hex}   0x02
   Should be equal     ${msg.fooName.third.hex}    0xff

Pass value dict to Struct but replace it in Get Message
   New message   FooExample   Example    messageType:0xb0b0
   define struct    first:1    second:2
   ${msg}   Get message    fooName.second:0x22
   Should be equal     ${msg.fooName.first.hex}    0x01
   Should be equal     ${msg.fooName.second.hex}   0x22
   Should be equal     ${msg.fooName.third.hex}    0xff


*** Keywords ***
Client sends request with struct
    [Arguments]    @{params}
    Message with struct
    Client sends message   @{params}

Client sends struct with struct
    [Arguments]    @{params}
    Message with struct in struct
    Client sends message   @{params}

Server receives request with struct
    [Arguments]    @{params}
    Message with struct
    ${msg} =    Server Receives message    @{params}
    [return]    ${msg}

Server Receives struct with struct
    [Arguments]    @{params}
    Message with struct in struct
    ${msg} =    Server Receives message    @{params}
    [return]    ${msg}

Server should fail validation with struct
    [Arguments]    @{params}
    Run keyword and expect error     Value of field first does not *    Server receives request with struct    @{params}

Message with struct
    [arguments]    ${pair values}=
    New Message    StructRequest  Example    messageType:0xaaaa
    Pair    pair   ${pair values}

Pair
    [arguments]     ${name}=     ${value}=
    New Struct    Pair    ${name}
    u8    first       ${value}
    u8    second      ${value}
    End struct

Message with struct in struct
    New Message   StructStruct   Example    messageType:0xaaaa
    StructStruct   structstruct

StructStruct
    [Arguments]    ${name}
    New Struct   StructStruct   ${name}
    u32      foo    6
    Bar      mollyMalones
    End struct

Bar
    [Arguments]    ${name}
    New Struct   Bar   ${name}
    u8        opensAt    10
    u8        closesAt    2
    End struct

Get message fails because '${name}' is not completed
    Run keyword and expect error   Message definition not complete. ${name} not completed.  Get message

define struct
   [arguments]     @{params}
   New Struct    FooType   fooName    @{params}
   u8    first      0xff
   u8    second     0xff
   u8    third      0xff
   End Struct

